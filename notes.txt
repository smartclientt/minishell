pipes :
-	in memory file that u can read and write from it
-	the pipe open two file discriptors for both reading and writing
-	a read from filde [0] get access to the data writing in filde [1]
-	when we use the pipe to process are working one for writing from the stdout and the second (fd = 0) is to read from the stdin (fd = 1)
-	to handle the pipe use case we need to know how to work with fork()
-	Pipe is created between the parent process and a childe, so if we need to know how to manage this processes
Muliti-pipe :
-	when we use the multiple pipe we need to redirecte the stdin and stdout to a pipe approproatly and we can execute the cmd after 
-	evry parent process wait the end of there childes processes
File descriptor consideration :
!!!	there is tow probleme whene we use multiple pipe : 
	+	specifying for each process exactly which pipe fd among the many, it has access to is STDIN AND stdout
	+	closing all file descriptors that comprise its pipes

to solve this 2 problemes :
-	first one: we need to duplicate fd to stdin or stdout whichever is appropriate
	-> we use : dup2(pipefd , stdin) or dup2(pipefd , stdout)
-	seconde one: we need to be sure that evry forked process close all pipe fd befor execute his own cmd

********************************************************************************************************************

Exit status :
->	wait(&status) :
	-	block the calling process and wait one of his child "exit" or a "Signal is received" or "return a int" from main
	-	after calling wait, the main process is waiting for any child process to end, and return (pid) of this child
	-	if more than one child is end, thene wait return any child pid (reap all the child who end) 
	-	if there is no child to wait for the wait return "-1" 
	Example : if we want to wait for all child process from main process we can use :
				while (wait(&status) != -1);
				that's mean we are waiting for all return value of child porcess are -1
status args in wait function is collect information about the process exited
we can use somme macros to manage this status information :
	-	WIFEXITED(status) : return true if the process termine properly by a call of exit(2) or exit(3)
	-	WEXITSTATUS(status) : if (WIFEXITED(status) is true) evaluate the lower 8 bit of argument passed to exit(2) or exit(3)
	Example : if wait(&status) return 256 (1 0000 0000)
				



int main(int ac, char **av, char **env)
{
	(void) ac;
	(void) av;
	(void) env;
	int n = 0;
	int fd[n][2];
	int id, id2;

	char **cmd1;
	cmd1 = malloc(sizeof(char *) * 2);
	cmd1[0] = "";
	cmd1[1] = NULL;
	char **cmd2;
	cmd2 = malloc(sizeof(char *) * 2);
	cmd2[0] = "-1";
	cmd2[1] = NULL;
	char **cmd3;
	cmd3 = malloc(sizeof(char *) * 4);
	cmd3[0] = "/bin/cat";
	cmd3[1] = "/bin/cat";
	cmd3[2] = "/bin/ls";
	cmd3[3] = NULL;

	int in, i;
	int input = 0;
	i = 0;

	int out = dup(1);
	int inn = dup(0);
	while (i < n)
	{
		pipe(fd[i]);
		id = fork();
		if (id == 0)
		{
			if (input != 0)
			{
				dup2(input, 0);
				close(input);
			}
			if (fd[i][1] != 1)
			{
				dup2(fd[i][1], 1);
				close(fd[i][1]);
			}
			execve(cmd3[i], cmd1, env);
		}
		input = fd[i][0];
		close(fd[i][1]);
		i++;
	}
	if (input != 0)
		dup2(input, 0);
	dup2(0, out);
	dup2(1, inn);
	close(out);
	close(inn);
	execve("/bin/cat", cmd2, env);
}




-------------------------------------------------------------

int main(int ac, char **av, char **env)
{
	(void) ac;
	(void) av;
	(void) env;

	char **cmd1;
	cmd1 = malloc(sizeof(char *) * 2);
	cmd1[0] = "/bin/cat";
	cmd1[1] = NULL;

	char **cmd3;
	cmd3 = malloc(sizeof(char *) * 2);
	cmd3[0] = "/bin/cat";
	cmd3[1] = NULL;

	char **cmd2;
	cmd2 = malloc(sizeof(char *) * 3);
	cmd2[0] = "/bin/ls";
	cmd2[1] = "-la";
	cmd2[2] = NULL;

	size_t cmds_n = 3;

	char ***cmds = malloc(sizeof(char **) * cmds_n);
	cmds[0] = cmd1;
	cmds[1] = cmd3;
	cmds[2] = cmd2;

	int prev_in = -1;
	int prev_out = -1;
	int read_write[2] = { -1, -1 };

	for (size_t i = 0; i < cmds_n; i++) {

		prev_in = read_write[0];
		prev_out = read_write[1];

		if (i != cmds_n - 1)
			pipe(read_write);

		int pid = fork();

		if (pid == 0) {

			if (i == 0) {

				close(read_write[0]);

				if (dup2(read_write[1], STDOUT_FILENO) == -1)
					printf("F - Failed to redirect out %d\n", read_write[1]);
				close(read_write[1]);

			} else if (i == cmds_n - 1) {

				close(prev_out);

				if (dup2(prev_in, STDIN_FILENO) == -1)
					printf("E - Failed to redirect in %d\n", prev_in);
				close(prev_in);

			} else {

				close(read_write[0]);
				close(prev_out);

				if (dup2(prev_in, STDIN_FILENO) == -1)
					printf("M - Failed to redirect in %d\n", prev_in);
				close(prev_in);

				if (dup2(read_write[1], STDOUT_FILENO) == -1)
					printf("M - Failed to redirect out %d\n", read_write[1]);
				close(read_write[1]);

			}

			execve(cmds[i][0], cmds[i], env);
			exit(1);
		}

		close(prev_in);
		close(prev_out);
	}

	while (wait(NULL) != -1);

	return (0);
}

-------------------------------------------------------

while (i < n)
{
	if (i + 1 != n)
		pipe(fd[i]);
	id = fork();
	if (id == 0)
	{
		if (input != -1)
		{
			close(fd[i][1]);
			dup2(input, 0);
			close(input);
		}
		if (i != n - 1)
		{
			close(fd[i][0]);
			dup2(fd[i][1], 1);
			close(fd[i][1]);
		}
		execve(cmd3[i], cmd1, env);
	}
	input = fd[i][0];
	close(fd[i][0]);
	i++;
}


in | out;